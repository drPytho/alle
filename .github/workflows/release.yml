name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: alle-linux-x86_64.tar.gz

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: alle-linux-x86_64-musl.tar.gz

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: alle-linux-aarch64.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: alle-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            name: alle-macos-aarch64.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: alle-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }} alle
          cd -

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} alle.exe
          cd -

      - name: Generate SHA256 checksums (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256

      - name: Generate SHA256 checksums (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}

          # Create release if it doesn't exist (first job to finish creates it)
          if ! gh release view "$VERSION" >/dev/null 2>&1; then
            gh release create "$VERSION" \
              --title "Release $VERSION" \
              --notes "Release $VERSION" \
              --draft=false \
              --prerelease=false
          fi

          # Upload assets
          gh release upload "$VERSION" "${{ matrix.name }}" "${{ matrix.name }}.sha256" --clobber
